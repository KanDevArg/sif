// Code generated by protoc-gen-go. DO NOT EDIT.
// source: s_log.proto

package rpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MLogMsg struct {
	Level                int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Source               string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Message              string   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLogMsg) Reset()         { *m = MLogMsg{} }
func (m *MLogMsg) String() string { return proto.CompactTextString(m) }
func (*MLogMsg) ProtoMessage()    {}
func (*MLogMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a276b15ac053355, []int{0}
}

func (m *MLogMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLogMsg.Unmarshal(m, b)
}
func (m *MLogMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLogMsg.Marshal(b, m, deterministic)
}
func (m *MLogMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLogMsg.Merge(m, src)
}
func (m *MLogMsg) XXX_Size() int {
	return xxx_messageInfo_MLogMsg.Size(m)
}
func (m *MLogMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_MLogMsg.DiscardUnknown(m)
}

var xxx_messageInfo_MLogMsg proto.InternalMessageInfo

func (m *MLogMsg) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MLogMsg) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *MLogMsg) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type MLogMsgAck struct {
	Time                 int64    `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MLogMsgAck) Reset()         { *m = MLogMsgAck{} }
func (m *MLogMsgAck) String() string { return proto.CompactTextString(m) }
func (*MLogMsgAck) ProtoMessage()    {}
func (*MLogMsgAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_0a276b15ac053355, []int{1}
}

func (m *MLogMsgAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MLogMsgAck.Unmarshal(m, b)
}
func (m *MLogMsgAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MLogMsgAck.Marshal(b, m, deterministic)
}
func (m *MLogMsgAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MLogMsgAck.Merge(m, src)
}
func (m *MLogMsgAck) XXX_Size() int {
	return xxx_messageInfo_MLogMsgAck.Size(m)
}
func (m *MLogMsgAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MLogMsgAck.DiscardUnknown(m)
}

var xxx_messageInfo_MLogMsgAck proto.InternalMessageInfo

func (m *MLogMsgAck) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MLogMsgAck) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*MLogMsg)(nil), "rpc.MLogMsg")
	proto.RegisterType((*MLogMsgAck)(nil), "rpc.MLogMsgAck")
}

func init() { proto.RegisterFile("s_log.proto", fileDescriptor_0a276b15ac053355) }

var fileDescriptor_0a276b15ac053355 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcf, 0xc1, 0x6a, 0x83, 0x40,
	0x10, 0x80, 0xe1, 0x6e, 0xb7, 0x2a, 0x9d, 0x16, 0x0a, 0x43, 0x29, 0x4b, 0x4f, 0xe2, 0x69, 0x4f,
	0x1e, 0x5a, 0xf0, 0xee, 0x5d, 0x0f, 0xd9, 0x3c, 0x40, 0x48, 0x96, 0x61, 0x11, 0x35, 0x23, 0xbb,
	0xea, 0xf3, 0x87, 0xac, 0x06, 0x72, 0x9b, 0x8f, 0x81, 0x7f, 0x18, 0xf8, 0x08, 0xa7, 0x81, 0x5d,
	0x39, 0x79, 0x9e, 0x19, 0xa5, 0x9f, 0x6c, 0x71, 0x80, 0xac, 0x6d, 0xd8, 0xb5, 0xc1, 0xe1, 0x37,
	0x24, 0x03, 0xad, 0x34, 0x28, 0x91, 0x0b, 0x9d, 0x98, 0x0d, 0xf8, 0x03, 0x69, 0xe0, 0xc5, 0x5b,
	0x52, 0xaf, 0xb9, 0xd0, 0xef, 0x66, 0x17, 0x2a, 0xc8, 0x46, 0x0a, 0xe1, 0xec, 0x48, 0xc9, 0xb8,
	0x78, 0xb0, 0xa8, 0x00, 0xf6, 0x64, 0x6d, 0x7b, 0x44, 0x78, 0x9b, 0xbb, 0x91, 0x62, 0x54, 0x9a,
	0x38, 0xdf, 0x2f, 0x59, 0x5e, 0xae, 0x73, 0x4c, 0x26, 0x66, 0xc3, 0x5f, 0x05, 0xd0, 0xb0, 0x3b,
	0x92, 0x5f, 0x3b, 0x4b, 0xa8, 0x41, 0x36, 0xec, 0xf0, 0xb3, 0xf4, 0x93, 0x2d, 0xf7, 0xde, 0xef,
	0xd7, 0xb3, 0x6a, 0xdb, 0x17, 0x2f, 0x5a, 0x5c, 0xd2, 0xf8, 0xce, 0xff, 0x2d, 0x00, 0x00, 0xff,
	0xff, 0xcc, 0x4d, 0x1d, 0x08, 0xdd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	Log(ctx context.Context, opts ...grpc.CallOption) (LogService_LogClient, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) Log(ctx context.Context, opts ...grpc.CallOption) (LogService_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LogService_serviceDesc.Streams[0], "/rpc.LogService/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &logServiceLogClient{stream}
	return x, nil
}

type LogService_LogClient interface {
	Send(*MLogMsg) error
	CloseAndRecv() (*MLogMsgAck, error)
	grpc.ClientStream
}

type logServiceLogClient struct {
	grpc.ClientStream
}

func (x *logServiceLogClient) Send(m *MLogMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *logServiceLogClient) CloseAndRecv() (*MLogMsgAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MLogMsgAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	Log(LogService_LogServer) error
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) Log(srv LogService_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LogServiceServer).Log(&logServiceLogServer{stream})
}

type LogService_LogServer interface {
	SendAndClose(*MLogMsgAck) error
	Recv() (*MLogMsg, error)
	grpc.ServerStream
}

type logServiceLogServer struct {
	grpc.ServerStream
}

func (x *logServiceLogServer) SendAndClose(m *MLogMsgAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *logServiceLogServer) Recv() (*MLogMsg, error) {
	m := new(MLogMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Log",
			Handler:       _LogService_Log_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "s_log.proto",
}
